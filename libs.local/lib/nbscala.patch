diff --git a/src/compiler/scala/tools/nsc/Global.scala b/src/compiler/scala/tools/nsc/Global.scala
index 116684c..e025016 100644
--- a/src/compiler/scala/tools/nsc/Global.scala
+++ b/src/compiler/scala/tools/nsc/Global.scala
@@ -201,6 +201,7 @@ class Global(var currentSettings: Settings, var reporter: Reporter)
   val treeBrowser = treeBrowsers.create()
 
   // ------------ Hooks for interactive mode-------------------------
+  var qualToRecoveredType = new mutable.HashMap[Tree, Type]
 
   /** Called every time an AST node is successfully typechecked in typerPhase.
    */
diff --git a/src/compiler/scala/tools/nsc/interactive/Global.scala b/src/compiler/scala/tools/nsc/interactive/Global.scala
index 105b0e4..a6fcc44 100644
--- a/src/compiler/scala/tools/nsc/interactive/Global.scala
+++ b/src/compiler/scala/tools/nsc/interactive/Global.scala
@@ -919,8 +919,9 @@ class Global(settings: Settings, _reporter: Reporter, projectName: String = "")
       (!implicitlyAdded || m.implicitlyAdded)
 
     def add(sym: Symbol, pre: Type, implicitlyAdded: Boolean)(toMember: (Symbol, Type) => M) {
-      if ((sym.isGetter || sym.isSetter) && sym.accessed != NoSymbol) {
-        add(sym.accessed, pre, implicitlyAdded)(toMember)
+      val accessed = if (sym.isGetter || sym.isSetter) sym.accessed else NoSymbol
+      if (accessed != NoSymbol) {
+        add(accessed, pre, implicitlyAdded)(toMember)
       } else if (!sym.name.decodedName.containsName(Dollar) && !sym.isSynthetic && sym.hasRawInfo) {
         val symtpe = pre.memberType(sym) onTypeError ErrorType
         matching(sym, symtpe, this(sym.name)) match {
@@ -1041,7 +1042,7 @@ class Global(settings: Settings, _reporter: Reporter, projectName: String = "")
     }
 
     //print("add members")
-    for (sym <- ownerTpe.members)
+    for (sym <- ownerTpe.resultType.members)
       addTypeMember(sym, pre, sym.owner != ownerTpe.typeSymbol, NoSymbol)
     members.allMembers #:: {
       //print("\nadd pimped")
diff --git a/src/compiler/scala/tools/nsc/typechecker/ContextErrors.scala b/src/compiler/scala/tools/nsc/typechecker/ContextErrors.scala
index 4bf7f78..f0e6d51 100644
--- a/src/compiler/scala/tools/nsc/typechecker/ContextErrors.scala
+++ b/src/compiler/scala/tools/nsc/typechecker/ContextErrors.scala
@@ -294,6 +294,8 @@ trait ContextErrors {
 
       //typedSelect
       def NotAMemberError(sel: Tree, qual: Tree, name: Name) = {
+        global.qualToRecoveredType += (sel  -> qual.tpe.widen)
+        global.qualToRecoveredType += (qual -> qual.tpe.widen)
         def errMsg = {
           val owner            = qual.tpe.typeSymbol
           val target           = qual.tpe.widen
diff --git a/src/compiler/scala/tools/nsc/typechecker/Namers.scala b/src/compiler/scala/tools/nsc/typechecker/Namers.scala
index 7a3ab00..fdf4737 100644
--- a/src/compiler/scala/tools/nsc/typechecker/Namers.scala
+++ b/src/compiler/scala/tools/nsc/typechecker/Namers.scala
@@ -1275,6 +1275,7 @@ trait Namers extends MethodSynthesis {
             }
             if (!isConstr)
               methOwner.resetFlag(INTERFACE) // there's a concrete member now
+            if (parentNamer ne null) { // 'null' should only happen forInteractive
             val default = parentNamer.enterSyntheticSym(defaultTree)
             if (forInteractive && default.owner.isTerm) {
               // save the default getters as attachments in the method symbol. if compiling the
@@ -1286,6 +1287,7 @@ trait Namers extends MethodSynthesis {
                 case None => meth.updateAttachment(new DefaultsOfLocalMethodAttachment(default))
               }
             }
+            }
           } else if (baseHasDefault) {
             // the parameter does not have a default itself, but the
             // corresponding parameter in the base class does.
